class Node:
    def __init__(self, item, next=None):
        self.item = item
        self.next = next

class Stack:

    def __init__(self):
        self.head = None

    def is_empty(self):
        return self.head is None

    def push(self, item):
        self.head = Node(item, self.head)

    def pop(self):
        item = self.head.item
        self.head = self.head.next
        return item

    @property
    def peek(self):
        return self.head.item

    def reverse(self):
        if self.head == None:
            return None
        res = None
        while self.head.next != None:
            res = Node(self.head.item, res)
            self.head = self.head.next
        self.head = Node(self.head.item, res)

class MyQueue:

    def __init__(self):
        self.head = Stack()

    def push(self, x: int) -> None:
        self.head.reverse()
        self.head.push(x)
        self.head.reverse()

    def pop(self) -> int:
        return self.head.pop()

    def peek(self) -> int:
        return self.head.peek

    def empty(self) -> bool:
        return self.head.is_empty()
